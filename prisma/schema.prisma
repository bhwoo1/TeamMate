// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? @default("user")
  resultcode    String? 
  accounts      Account[]
  sessions      Session[]
  message       String?
  createdAt     DateTime  @default(now()) // 추가
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  posteduser String
  createdAt  DateTime  @default(now())
  comments   Comment[] // Post에 연결된 Comment 목록을 참조
}

model Comment {
  id         Int       @id @default(autoincrement())
  postid     Int
  title      String
  content    String
  posteduser String
  createdAt  DateTime  @default(now())
  
  post       Post      @relation(fields: [postid], references: [id]) // Post와의 관계 설정
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}

model Roster {
  backnumber        Int
  name              String
  position          String
  birthdate         String
  injury            boolean @default(false)
  injuredpart       String
  recoveryperiod    String
}