// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]       // 여러 계정을 가질 수 있음
  sessions      Session[]       // 세션
  teams         TeamUser[]      // 유저가 속한 팀
  joinRequests  TeamJoinRequest[] // 유저의 팀 가입 요청
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   // 유저와의 관계를 나타냄
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id]) // User와 관계 설정

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId]) // 동일한 provider 및 providerAccountId의 조합을 유일하게 만듬
  @@index([userId]) // userId에 인덱스 추가
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Team {
  id          Int       @id @default(autoincrement())
  teamName    String
  teamLogo    String
  description String
  location    String
  posts       Post[]    // 팀의 게시글
  squad       Squad[]   @relation("TeamSquad")
  users       TeamUser[] // 팀에 속한 유저
  comments    Comment[]  // 팀의 댓글
  schedules   Schedule[] @relation("TeamSchedule") // 팀의 일정 
  joinRequests TeamJoinRequest[] // 팀에 대한 가입 요청들

  createdAt DateTime @default(now())
}

model TeamUser {
  id         Int     @id @default(autoincrement())
  userId     String  @unique // 이메일 대신 유저 id를 사용
  teamId     Int
  role       String  @default("member") // "member" or "admin"
  
  user       User    @relation(fields: [userId], references: [id]) // userId로 User와 관계 설정
  team       Team    @relation(fields: [teamId], references: [id])
}

model TeamJoinRequest {
  id        Int      @id @default(autoincrement())
  userId    String
  username  String
  teamId    Int
  status    String  @default("pending")
  user      User    @relation(fields: [userId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  posteduser String
  isNotice Boolean  @default(false)
  comments Comment[]
  teamId   Int
  Team     Team     @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
}

model Comment {
  id         Int       @id @default(autoincrement())
  postid     Int
  content    String
  posteduser String
  createdAt  DateTime  @default(now())
  teamId     Int
  
  post       Post      @relation(fields: [postid], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
}

model Squad {
  id                Int      @id @default(autoincrement())
  backnumber        Int      @unique
  profileimage      String
  name              String
  position          String
  birthdate         String
  injury            Boolean  @default(false)
  injuredpart       String
  recoveryperiod    String
  teamId            Int
  team              Team     @relation("TeamSquad", fields: [teamId], references: [id])
}

model Schedule {
  id                Int     @id @default(autoincrement())
  date              DateTime
  task              String
  teamId            Int
  location          String
  completed         Boolean @default(false)

  team              Team    @relation("TeamSchedule", fields: [teamId], references: [id])
}